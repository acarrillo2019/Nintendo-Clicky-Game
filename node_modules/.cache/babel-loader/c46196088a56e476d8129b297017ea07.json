{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Beast Mode\\\\Desktop\\\\Projects\\\\Nintendo-Clicky-Game\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport Card from \"./components/Card\";\nimport Waxxer from \"./components/Waxxer\";\nimport UIfx from 'uifx';\nimport coin from './sounds/smb_coin.mp3';\nimport oops from './sounds/smb_mariodie.mp3';\nconst coins = new UIfx({\n  asset: coin\n});\nconst oopsie = new UIfx({\n  asset: oops\n});\nshuffle(images);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      images: images,\n      score: 0,\n      topScore: 0,\n      text: \"Click an image only once!\",\n      class: \"\"\n    };\n\n    this.animEnd = () => {\n      this.setState({\n        class: \"\"\n      });\n    };\n\n    this.isClicked = (boolean, id) => {\n      if (boolean) {\n        this.state.images.map(element => {\n          return element.clicked = false;\n        });\n        shuffle(this.state.images);\n        this.setState({\n          images: images,\n          score: 0,\n          topScore: this.state.score,\n          text: \"Too bad! Try again.\",\n          class: \"incorrect\",\n          oopsie: oopsie\n        });\n      } else {\n        this.state.images.map(element => {\n          if (element.id === id) {\n            element.clicked = true;\n          }\n\n          return element;\n        });\n        shuffle(this.state.images);\n        this.setState({\n          images: images,\n          score: this.state.score + 1,\n          text: \"Keep going!\",\n          class: \"correct\",\n          coins: this.state.value\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Waxxer, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      text: this.state.text,\n      class: this.state.class,\n      anim: this.animEnd,\n      coin: coins,\n      oopsie: oopsie,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 7\n      }\n    }, this.state.images.map(image => {\n      return /*#__PURE__*/React.createElement(Card, {\n        key: image.id,\n        id: image.id,\n        image: image.imageSrc,\n        name: image.name,\n        clicked: image.clicked,\n        isClicked: this.isClicked,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }\n      });\n    }));\n  }\n\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n\n  return a;\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Beast Mode/Desktop/Projects/Nintendo-Clicky-Game/src/App.js"],"names":["React","Component","images","Card","Waxxer","UIfx","coin","oops","coins","asset","oopsie","shuffle","App","state","score","topScore","text","class","animEnd","setState","isClicked","boolean","id","map","element","clicked","value","render","image","imageSrc","name","a","i","length","j","Math","floor","random"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport images from \"./images.json\";\nimport Card from \"./components/Card\";\nimport Waxxer from \"./components/Waxxer\";\nimport UIfx from 'uifx';\nimport coin from './sounds/smb_coin.mp3';\nimport oops from './sounds/smb_mariodie.mp3';\n\nconst coins = new UIfx({asset: coin});\nconst oopsie = new UIfx({asset: oops});\n\nshuffle(images);\n\nclass App extends Component {\n  state = {\n    images: images,\n    score: 0,\n    topScore: 0,\n    text: \"Click an image only once!\",\n    class: \"\"\n  };\n  animEnd = () => {\n    this.setState({\n      class: \"\"\n    });\n  };\n  isClicked = (boolean, id) => {\n    if (boolean) {\n      this.state.images.map(element => {\n        return (element.clicked = false);\n      });\n      shuffle(this.state.images);\n      \n      this.setState({\n        images: images,\n        score: 0,\n        topScore: this.state.score,\n        text: \"Too bad! Try again.\",\n        class: \"incorrect\",\n        oopsie: oopsie\n      }\n      );\n    } else {\n      this.state.images.map(element => {\n        if (element.id === id) {\n          element.clicked = true;\n        }\n        return element;\n      }); \n      shuffle(this.state.images);\n      this.setState({\n        images: images,\n        score: this.state.score + 1,\n        text: \"Keep going!\",\n        class: \"correct\",\n        coins: this.state.value\n      });\n      \n    }\n  };\n  render() {\n    return (\n      <Waxxer\n        score={this.state.score}\n        topScore={this.state.topScore}\n        text={this.state.text}\n        class={this.state.class}\n        anim={this.animEnd}\n        coin={coins}\n        oopsie={oopsie}\n      >\n        {this.state.images.map(image => {\n          return (\n            <Card\n              key={image.id}\n              id={image.id}\n              image={image.imageSrc}\n              name={image.name}\n              clicked={image.clicked}\n              isClicked={this.isClicked}\n              \n            />\n          );\n        })}\n      </Waxxer>\n      \n    );\n  }\n}\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}